<?php


namespace App\Controller;


use ESD\Core\Plugins\Event\Event;
use ESD\Core\Server\Server;
use ESD\Go\GoController;
use ESD\Plugins\EasyRoute\Annotation\RequestMapping;
use ESD\Plugins\EasyRoute\Annotation\TcpController;
use ESD\Plugins\Pack\ClientData;
use ESD\Plugins\Pack\GetBoostSend;
use ESD\Plugins\Redis\GetRedis;
use ESD\Yii\Yii;

/**
 * @TcpController()
 * Class StreamController
 * @package App\Controller
 */
class StreamController extends GoController
{

    use GetBoostSend;
    use GetRedis;

    public function beforeAction($action)
    {
        printf("before\n");
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function afterAction($action, $result)
    {
        printf("after\n");
        return parent::afterAction($action, $result); // TODO: Change the autogenerated stub
    }

//    /**
//     * @RequestMapping()
//     */
//    public function actionTcp()
//    {
//        $fd = $this->clientData->getFd();
//        $receiveData = $this->clientData->getData();
//
//        Yii::info($receiveData);
//        var_dump($receiveData);
//
//        $sendMessage = sprintf("Server receive data: %s", $receiveData);
//        Server::$instance->send($fd, $sendMessage);
//
//        $this->autoBoostSend($fd, $sendMessage);
//
//        switch ($receiveData) {
//            case 'hello':
//                Server::$instance->send($fd, "Hi!!!");
//                $this->autoBoostSend($fd, "Hi!!!\r\n");
//                break;
//            case 'close':
//                Server::$instance->closeFd($fd);
//                break;
//        }
//    }

    /**
     * @RequestMapping("onReceive")
     * @throws \ESD\Plugins\Redis\RedisException
     */
    public function actionOnTcpReceive()
    {
        $fd = $this->clientData->getFd();
        $receiveData = $this->clientData->getData();

        var_dump($this->clientData);
        var_dump($fd, $receiveData);

        $clientDataObject = getContextValueByClassName(ClientData::class);
        var_dump($clientDataObject);
        $this->autoBoostSend($fd, "Hi!!! {$receiveData}\r\n");
        return;

        //数据验证功能过程略
        list($action, $deviceId) = explode("-", $receiveData);

        switch ($action) {
            //心跳 保存设备标识和连接fd的关系
            case 'heartbeat':
                $deviceKey = sprintf("device_%s", $deviceId);
                $this->redis()->hMSet($deviceKey, [
                    'fd' => $fd,
                    'device_id' => $deviceId,
                ]);
                break;
            //关机回执
            case 'shutdown_receipt':
                //事件名称
                $eventName = sprintf("shutdown_receipt_%s", $deviceId);
                //事件派发器
                $eventDispatcher = Server::$instance->getEventDispatcher();
                //事件
                $event = new Event($eventName, [
                    'device_id' => $deviceId,
                ]);
                //事件全进程派发
                $eventDispatcher->dispatchProcessEvent($event, ...Server::$instance->getProcessManager()->getProcesses());
                break;
        }
    }
}